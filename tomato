#!/usr/bin/env python3

import sys
from model import Model
import argparse
import generator

def parse_args():
    """Parse the command line arguments"""
    parser = argparse.ArgumentParser()
    
    input_group = parser.add_mutually_exclusive_group()
    input_group.add_argument("input_file", type=str, nargs='?', default=None,
                        help="Input file containing the model.")
    input_group.add_argument("--stdin", action='store_true', 
        default=False, 
        help="Use stdin for input file")
    
    parser.add_argument("-f", "--function", type=str, default=None, 
        help="Function name to generate tests for. If not provided\
            tests for the first function defined in the model will be generated")
    parser.add_argument("-H", "--no-headrow", action='store_true', 
        default=False, 
        help="do not print the head row with the parameter names")
    parser.add_argument("--use-choice-names", action='store_true', 
        default=False, 
        help="do not print the head row with the parameter names")
    
    
    group = parser.add_argument_group('Generators', 'Define a generator to use')
    generator_group = group.add_mutually_exclusive_group()
    generator_group.add_argument("--cartesian", action='store_true', 
        help="generate cartesian product of input choices")
    generator_group.add_argument("--random", action='store_true', 
        help="generate random test cases")
    generator_group.add_argument("--nwise", action='store_true',
        help="nwise generator (default)")
    
    random_group = parser.add_argument_group('Random generator options:')
    random_group.add_argument("-l", "--length", type=int, default=None,
        help="length of the randomly generated suite. 0 for infinite")
    random_group.add_argument("-D", "--duplicates", action='store_true', default=None,
        help="""Allows test cases to repeat. If not set and the number of test cases is 0,
            tests will be generated indifinitely""")
    random_group.add_argument("--adaptive", action='store_true', default=None,
        help="""Use adaptive techniques to generate tests that are far from 
            the ones already generated""")

    nwise_group = parser.add_argument_group('Nwise generator options')
    nwise_group.add_argument("-n", type=int, default=None, help="n in nwise. Default value: 2")
    nwise_group.add_argument("-c", "--coverage", default=None, 
        help="""Required coverage. 100 means all test cases that are allowed
            by constraints. Available for nwise and cartesian generators. Default vaule: 100""")
    

    args = parser.parse_args()
    if not (args.random or args.nwise or args.cartesian):
        args.nwise = True

    if not args.random and (args.length is not None or args.duplicates is not None or args.adaptive is not None):
        parser.error("--length, --duplicates and --no-adaptive can only be used with --random")
    
    if not args.nwise and (args.n is not None or args.coverage is not None):
        parser.error("-n and --coverage can only be used with --nwise")
        
    if args.input_file is None and not args.stdin:
        parser.error("Input file is required. Use --stdin to read from stdin")
            
    return args

if __name__ == '__main__':
    args = parse_args()
    
    function_name = args.function
    model = Model(args.input_file)
    
    if function_name is None:
        function = list(model.functions.values())[0]
    else:
        function = model.functions[function_name]
    
    if args.nwise:
        n = args.n
        coverage = args.coverage
        if n is None:
            n = 2
        if coverage is None:
            coverage = 100
            
        gen = generator.nwise(function, n, coverage=coverage)

    if args.cartesian:
        gen = generator.cartesian(function)
        
    if args.random:
        length = args.length
        duplicates = args.duplicates
        adaptive = args.adaptive
        if length is None:
            length = 0
        if duplicates is None:
            duplicates = False
        if adaptive is None:
            adaptive = False
            
        if not adaptive: 
            gen = generator.random(function,
                               length=length, 
                               duplicates=duplicates)
        else:
            gen = generator.adaptive_random(function,
                               length=length, 
                               duplicates=duplicates)
    
    if not args.no_headrow:
        print(','.join(function.get_parameter_names()))        
    for test in gen:
        if not args.use_choice_names:
            test = function.replace_choice_names_with_values(test)
        print(','.join(test))
    
    
